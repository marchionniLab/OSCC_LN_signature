table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
# Transpose the matrix
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
# Get the prediction stats
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
### Prepare the legend
forLegend_KTSP <- apply(rbind(
ci(roc(ArrayGroup, ktspStatsArray$statistics, levels = c("NEG", "POS"), direction = ">")),
ci(roc(tcgaGroup, ktspStatsTCGA$statistics, levels = c("NEG", "POS"), direction = ">")),
ci(roc(pcrGroup, ktspStatsPCR$statistics, levels = c("NEG", "POS"), direction = ">"))
),  1, function(x) {
x <- format(round(x, digits=2), nsmall=2)
paste("AUC: ", x[[2]], ";", "95% CI: ", x[[1]], "-", x[[3]])
})
forLegend_KTSP
### Training
datArray_KTSP <- melt(data.frame(
## Training Group
ArrayGroup= factor(ArrayGroup, levels = c("NEG", "POS")),
## Mechanistic KTSP SUM training
ktspStatsArray= ktspStatsArray$statistics))
### Change Colnames
colnames(datArray_KTSP) <- c("Status", "Dataset", "KTSP_sum")
### Testing
datTcga_KTSP <- melt(data.frame(
## Testing group
Testing= factor(tcgaGroup, levels = c("NEG", "POS")),
## Mechanistic KTSP SUM training
ktspStatsTCGA=ktspStatsTCGA$statistics))
### Change Colnames
colnames(datTcga_KTSP) <- c("Status", "Dataset", "KTSP_sum")
### Testing
datPCR_KTSP <- melt(data.frame(
## Testing group
Testing= pcrGroup,
## Mechanistic KTSP SUM training
ktspStatsPCR=ktspStatsPCR$statistics))
### Testing
datPCR_KTSP <- melt(data.frame(
## Testing group
Testing= factor(pcrGroup, levels = c("NEG", "POS")),
## Mechanistic KTSP SUM training
ktspStatsPCR=ktspStatsPCR$statistics))
### Change Colnames
colnames(datPCR_KTSP) <- c("Status", "Dataset", "KTSP_sum")
### Combine
dat_KTSP <- rbind(datArray_KTSP, datTcga_KTSP, datPCR_KTSP)
dat_KTSP$Status <- as.numeric(dat_KTSP$Status)-1
### Replace levels
levels(dat_KTSP$Dataset) <- c("Training (Array)", "Training (TCGA)", "Testing (RT-PCR)")
levels(dat_KTSP$Dataset) <- paste(levels(dat_KTSP$Dataset), forLegend_KTSP)
levels(dat_KTSP$Dataset)
### Color
myCol <- brewer.pal(3, "Dark2")[c(2,1)]
### Plot and legend titles
plotTitle <- "K-TSP Performance in the training and testing datasets"
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc(cutoffs.at = seq(1,20,1)) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc() +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(rev(dat_KTSP), aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc() +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
?geom_roc
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc(descending = T) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc(decrease = T) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
?style_roc
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc(increasing = F) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
#################################################################
### Plot Curve
png("./Figs/CompareAUCggplot.png",
width=3000, height=3000, res=360)
### Color
myCol <- brewer.pal(3, "Dark2")[c(2,1)]
### Plot and legend titles
plotTitle <- "K-TSP Performance in the training and testing datasets"
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc(increasing = F) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
### Close device
dev.off()
save(basicplot_KTSP, file = "./Objs/BasicPlot_KTSP.rda")
?droplevels
#################################################################
### Clean
rm(list=ls())
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
### ### Read HallmarksComb gene pairs
nms <- c("./Data/Pairs/CancerHallmarks/Angiogenesis/objs/angiogenesisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Apoptosis/objs/apoptosisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/CellGrowth/objs/growthPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/ImmunoSurv/objs/immuPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Invasion/objs/emtPairs.v6.1.rda",
"./Data/Pairs/TumorAssociatedGenes/TAGs.rda")
names(nms) <- gsub("Pairs",  "", gsub("\\..+",  "",  gsub(".+/",  "",  nms)))
### Load
allPairs <- lapply(nms,  function(x) get(load(x)))
### Reorder columns
allPairs <- mapply(x=allPairs,  type= names(nms),  FUN=function(x, type) {
## Reorder: Good gene first
if (type == "angiogenesis") x <- cbind(x[,  c("antiAngiogenesis", "proAngiogenesis")], type)
else if (type == "apoptosis") x <- cbind(x[,  c("proApoptotic", "antiApoptotic")], type)
else if (type == "growth") x <- cbind(x[,  c("antiGrowth", "proGrowth")], type)
else if (type == "immu") x <- cbind(x[,  c("ImmSurvON", "ImmSurvOFF")], type)
else if (type == "emt") x <- cbind(x[,  c("antiInvasion", "proInvasion")], type)
else if (type == "TAGs") x <- cbind(x[,  c("TSG", "Oncogene")], type)
x
},  SIMPLIFY=FALSE)
###  Rename
allPairs <- lapply(allPairs,  FUN=function(x) {
colnames(x) <- c("GoodGene",  "BadGene",  "Type")
x
})
### Combine
allTSPs <- Reduce("rbind",  allPairs)
dim(allTSPs)
View(allTSPs)
rm(list = ls())
library(switchBox)
library(caret)
###########################################################################################
load("./Objs/FinalClassifiers.rda")
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
View(pcrData)
# Get the node status
pcrGroup <- pcrData$NodeStatus
table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
# Transpose the matrix
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) > 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
tcgaKTSP
26/35
#####################################3
## Load the RT-PCR data
library("readxl")
pcrPheno <- read_xlsx("./Data/RT_PCR/Table 1.xlsx")
View(pcrPheno)
#################################################################
### Clean
rm(list=ls())
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
### #################################################################
nms <- c("./Data/Pairs/CancerHallmarks/Angiogenesis/objs/angiogenesisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Apoptosis/objs/apoptosisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/CellGrowth/objs/growthPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/ImmunoSurv/objs/immuPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Invasion/objs/emtPairs.v6.1.rda",
"./Data/Pairs/TumorAssociatedGenes/TAGs.rda")
names(nms) <- gsub("Pairs",  "", gsub("\\..+",  "",  gsub(".+/",  "",  nms)))
### Load
allPairs <- lapply(nms,  function(x) get(load(x)))
### Reorder columns
allPairs <- mapply(x=allPairs,  type= names(nms),  FUN=function(x, type) {
## Reorder: Good gene first
if (type == "angiogenesis") x <- cbind(x[,  c("antiAngiogenesis", "proAngiogenesis")], type)
else if (type == "apoptosis") x <- cbind(x[,  c("proApoptotic", "antiApoptotic")], type)
else if (type == "growth") x <- cbind(x[,  c("antiGrowth", "proGrowth")], type)
else if (type == "immu") x <- cbind(x[,  c("ImmSurvON", "ImmSurvOFF")], type)
else if (type == "emt") x <- cbind(x[,  c("antiInvasion", "proInvasion")], type)
else if (type == "TAGs") x <- cbind(x[,  c("TSG", "Oncogene")], type)
x
},  SIMPLIFY=FALSE)
names(nms)
nms
View(allPairs)
#################################################################
### Clean
rm(list=ls())
### ### Read HallmarksComb gene pairs
nms <- c("./Data/Pairs/CancerHallmarks/Angiogenesis/objs/angiogenesisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Apoptosis/objs/apoptosisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/CellGrowth/objs/growthPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/ImmunoSurv/objs/immuPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Invasion/objs/emtPairs.v6.1.rda",
"./Data/Pairs/TumorAssociatedGenes/TAGs.rda")
names(nms) <- gsub("Pairs",  "", gsub("\\..+",  "",  gsub(".+/",  "",  nms)))
### Load
allPairs <- lapply(nms,  function(x) get(load(x)))
### Reorder columns
allPairs <- mapply(x=allPairs,  type= names(nms),  FUN=function(x, type) {
## Reorder: Good gene first
if (type == "angiogenesis") x <- cbind(x[,  c("antiAngiogenesis", "proAngiogenesis")], type)
else if (type == "apoptosis") x <- cbind(x[,  c("proApoptotic", "antiApoptotic")], type)
else if (type == "growth") x <- cbind(x[,  c("antiGrowth", "proGrowth")], type)
else if (type == "immu") x <- cbind(x[,  c("ImmSurvON", "ImmSurvOFF")], type)
else if (type == "emt") x <- cbind(x[,  c("antiInvasion", "proInvasion")], type)
else if (type == "TAGs") x <- cbind(x[,  c("TSG", "Oncogene")], type)
x
},  SIMPLIFY=FALSE)
###  Rename
allPairs <- lapply(allPairs,  FUN=function(x) {
colnames(x) <- c("GoodGene",  "BadGene",  "Type")
x
})
### Combine
allTSPs <- Reduce("rbind",  allPairs)
dim(allTSPs)
###########################################################################################
load("./Objs/FinalClassifiers.rda")
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
# Get the node status
pcrGroup <- pcrData$NodeStatus
table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
library(switchBox)
library(caret)
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) > 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
View(pcrData)
View(pcrMat)
View(pcrData)
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
View(ktspStatsPCR)
View(ktspStatsPCR$statistics)
table(ktspStatsPCR$statistics, pcrData$NodeStatus)
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 3 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 3 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
rm(list = ls())
load("./Objs/FinalClassifiers.rda")
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
# Get the node status
pcrGroup <- pcrData$NodeStatus
table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
# Transpose the matrix
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 3 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
Class <- cbind(ktspStatsPCR$statistics, pcrData$NodeStatus)
colnames(Class) <- c("votes", "actual")
View(Class)
