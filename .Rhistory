legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
#################################################################
### Plot Curve
png("./Figs/CompareAUCggplot.png",
width=3000, height=3000, res=360)
### Color
myCol <- brewer.pal(3, "Dark2")[c(2,1)]
### Plot and legend titles
plotTitle <- "K-TSP Performance in the training and testing datasets"
#legendTitle <- "Dataset"
### Plot
basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=Dataset,
linetype = Dataset)) +
geom_roc(increasing = F) +
style_roc(theme = theme_grey) + ggtitle(plotTitle) +
theme(plot.title = element_text(face="bold", size=16, hjust = 0.5),
axis.text=element_text(face="plain", size = 11),
axis.title=element_text(face="bold", size = 13),
legend.justification=c(1,0),  legend.position=c(1,0),
legend.background=element_rect(fill="lightblue1"),
legend.text=element_text(face="plain", size = 10),
legend.title = element_text(face="bold", size=12)) +
scale_color_manual(values = c("darkred", "darkred", "darkblue")) +
#scale_color_manual(legendTitle, values=rep(myCol, 2)) +
scale_linetype_manual(values=c("solid", "solid", "solid")) +
guides(colour = guide_legend(override.aes = list(size=3)))
### Plot
basicplot_KTSP
### Close device
dev.off()
save(basicplot_KTSP, file = "./Objs/BasicPlot_KTSP.rda")
?droplevels
#################################################################
### Clean
rm(list=ls())
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
### ### Read HallmarksComb gene pairs
nms <- c("./Data/Pairs/CancerHallmarks/Angiogenesis/objs/angiogenesisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Apoptosis/objs/apoptosisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/CellGrowth/objs/growthPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/ImmunoSurv/objs/immuPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Invasion/objs/emtPairs.v6.1.rda",
"./Data/Pairs/TumorAssociatedGenes/TAGs.rda")
names(nms) <- gsub("Pairs",  "", gsub("\\..+",  "",  gsub(".+/",  "",  nms)))
### Load
allPairs <- lapply(nms,  function(x) get(load(x)))
### Reorder columns
allPairs <- mapply(x=allPairs,  type= names(nms),  FUN=function(x, type) {
## Reorder: Good gene first
if (type == "angiogenesis") x <- cbind(x[,  c("antiAngiogenesis", "proAngiogenesis")], type)
else if (type == "apoptosis") x <- cbind(x[,  c("proApoptotic", "antiApoptotic")], type)
else if (type == "growth") x <- cbind(x[,  c("antiGrowth", "proGrowth")], type)
else if (type == "immu") x <- cbind(x[,  c("ImmSurvON", "ImmSurvOFF")], type)
else if (type == "emt") x <- cbind(x[,  c("antiInvasion", "proInvasion")], type)
else if (type == "TAGs") x <- cbind(x[,  c("TSG", "Oncogene")], type)
x
},  SIMPLIFY=FALSE)
###  Rename
allPairs <- lapply(allPairs,  FUN=function(x) {
colnames(x) <- c("GoodGene",  "BadGene",  "Type")
x
})
### Combine
allTSPs <- Reduce("rbind",  allPairs)
dim(allTSPs)
View(allTSPs)
rm(list = ls())
library(switchBox)
library(caret)
###########################################################################################
load("./Objs/FinalClassifiers.rda")
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
View(pcrData)
# Get the node status
pcrGroup <- pcrData$NodeStatus
table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
# Transpose the matrix
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) > 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
tcgaKTSP
26/35
#####################################3
## Load the RT-PCR data
library("readxl")
pcrPheno <- read_xlsx("./Data/RT_PCR/Table 1.xlsx")
View(pcrPheno)
#################################################################
### Clean
rm(list=ls())
require(switchBox)
require(Biobase)
require(limma)
require(pROC)
require(caret)
require(RColorBrewer)
require(ggplot2)
require(reshape)
require(plotROC)
### #################################################################
nms <- c("./Data/Pairs/CancerHallmarks/Angiogenesis/objs/angiogenesisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Apoptosis/objs/apoptosisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/CellGrowth/objs/growthPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/ImmunoSurv/objs/immuPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Invasion/objs/emtPairs.v6.1.rda",
"./Data/Pairs/TumorAssociatedGenes/TAGs.rda")
names(nms) <- gsub("Pairs",  "", gsub("\\..+",  "",  gsub(".+/",  "",  nms)))
### Load
allPairs <- lapply(nms,  function(x) get(load(x)))
### Reorder columns
allPairs <- mapply(x=allPairs,  type= names(nms),  FUN=function(x, type) {
## Reorder: Good gene first
if (type == "angiogenesis") x <- cbind(x[,  c("antiAngiogenesis", "proAngiogenesis")], type)
else if (type == "apoptosis") x <- cbind(x[,  c("proApoptotic", "antiApoptotic")], type)
else if (type == "growth") x <- cbind(x[,  c("antiGrowth", "proGrowth")], type)
else if (type == "immu") x <- cbind(x[,  c("ImmSurvON", "ImmSurvOFF")], type)
else if (type == "emt") x <- cbind(x[,  c("antiInvasion", "proInvasion")], type)
else if (type == "TAGs") x <- cbind(x[,  c("TSG", "Oncogene")], type)
x
},  SIMPLIFY=FALSE)
names(nms)
nms
View(allPairs)
#################################################################
### Clean
rm(list=ls())
### ### Read HallmarksComb gene pairs
nms <- c("./Data/Pairs/CancerHallmarks/Angiogenesis/objs/angiogenesisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Apoptosis/objs/apoptosisPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/CellGrowth/objs/growthPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/ImmunoSurv/objs/immuPairs.v6.1.rda",
"./Data/Pairs/CancerHallmarks/Invasion/objs/emtPairs.v6.1.rda",
"./Data/Pairs/TumorAssociatedGenes/TAGs.rda")
names(nms) <- gsub("Pairs",  "", gsub("\\..+",  "",  gsub(".+/",  "",  nms)))
### Load
allPairs <- lapply(nms,  function(x) get(load(x)))
### Reorder columns
allPairs <- mapply(x=allPairs,  type= names(nms),  FUN=function(x, type) {
## Reorder: Good gene first
if (type == "angiogenesis") x <- cbind(x[,  c("antiAngiogenesis", "proAngiogenesis")], type)
else if (type == "apoptosis") x <- cbind(x[,  c("proApoptotic", "antiApoptotic")], type)
else if (type == "growth") x <- cbind(x[,  c("antiGrowth", "proGrowth")], type)
else if (type == "immu") x <- cbind(x[,  c("ImmSurvON", "ImmSurvOFF")], type)
else if (type == "emt") x <- cbind(x[,  c("antiInvasion", "proInvasion")], type)
else if (type == "TAGs") x <- cbind(x[,  c("TSG", "Oncogene")], type)
x
},  SIMPLIFY=FALSE)
###  Rename
allPairs <- lapply(allPairs,  FUN=function(x) {
colnames(x) <- c("GoodGene",  "BadGene",  "Type")
x
})
### Combine
allTSPs <- Reduce("rbind",  allPairs)
dim(allTSPs)
###########################################################################################
load("./Objs/FinalClassifiers.rda")
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
# Get the node status
pcrGroup <- pcrData$NodeStatus
table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
library(switchBox)
library(caret)
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) > 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
View(pcrData)
View(pcrMat)
View(pcrData)
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
View(ktspStatsPCR)
View(ktspStatsPCR$statistics)
table(ktspStatsPCR$statistics, pcrData$NodeStatus)
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 2.5 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 3 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 3 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
rm(list = ls())
load("./Objs/FinalClassifiers.rda")
## Load the RT-PCR data
pcrData <- read.delim("./Data/RT_PCR/deltaCt.txt")
# Get the node status
pcrGroup <- pcrData$NodeStatus
table(pcrGroup)
# Rename the groups from 0,1 to neg,pos
pcrGroup[pcrGroup == 0] <- "NEG"
pcrGroup[pcrGroup == 1] <- "POS"
# Get the matrix
pcrMat <- pcrData[, -14]
rownames(pcrMat) <- pcrMat$SampleName
pcrMat$SampleName <- NULL
# Transpose the matrix
pcrMat <- t(pcrMat)
# One gene is misspelled, rename it
rownames(pcrMat)[rownames(pcrMat) == "TFGB2"] <- "TGFB2"
### Compute the sum and find the best threshold: ALL TRAINING SAMPLES
ktspStatsPCR <- SWAP.KTSP.Statistics(
inputMat = pcrMat,
classifier = tcgaKTSP,
CombineFunc = sum)
summary(ktspStatsPCR$statistics)
### Print ROC curve local maximas
auc(roc(pcrGroup, ktspStatsPCR$statistics))
### Get prediction based on best threshold from ROC curve
### Note the use of ">"
pcrPrediction <- SWAP.KTSP.Classify(
pcrMat,
tcgaKTSP,
DecisionFunc = function(x) sum(x) >= 3 )
pcrGroup <- factor(pcrGroup, levels = c("POS", "NEG"))
table(pcrGroup)
### Resubstitution performance in the TRAINING set
confusionMatrix(pcrPrediction, pcrGroup, positive="POS")
Class <- cbind(ktspStatsPCR$statistics, pcrData$NodeStatus)
colnames(Class) <- c("votes", "actual")
View(Class)
load("./Objs/allTSPs_Annot.rda")
load("./Objs/myTSPs.rda")
load("./Objs/FinalClassifiers.rda")
ClassifierGoodGns <- ArrayKTSP$TSPs[,1]
ClassifierBadGns <- ArrayKTSP$TSPs[,2]
AllGoodGns <- allTSPs[, c(1,3)]
AllGoodGns <- as.data.frame(AllGoodGns)
GoodGnsType <- AllGoodGns[AllGoodGns$GoodGene %in% ClassifierGoodGns, ]
table(GoodGnsType$GoodGene, GoodGnsType$Type)
AllBadGns <- allTSPs[, c(2,3)]
AllBadGns <- as.data.frame(AllBadGns)
BadGnsType <- AllBadGns[AllBadGns$BadGene %in% ClassifierBadGns, ]
table(BadGnsType$BadGene, BadGnsType$Type)
summary(ClassifierBadGns %in% myTSPs[,2])
summary(ClassifierBadGns %in% myTSPs[,1])
summary(ClassifierGoodGns %in% myTSPs[,1])
View(allTSPs)
X <- allTSPs[which(allTSPs[,1] == "SKI" & which(allTSPs[,2] == "PDLIM4")), ]
View(X)
X <- allTSPs[which(allTSPs[,2] == "SKI" & which(allTSPs[,1] == "PDLIM4")), ]
View(X)
X <- allTSPs[which(allTSPs[,1] == "SKI" & which(allTSPs[,c(1,2)] == "PDLIM4")), ]
View(X)
X <- allTSPs[which(allTSPs[,c(1,2)] == "SKI" & which(allTSPs[,c(1,2)] == "PDLIM4")), ]
X <- allTSPs[which(allTSPs[,1] == "SKI" & allTSPs[,2] == "PDLIM4"), ]
X <- allTSPs[which(allTSPs[,2] == "SKI" & allTSPs[,1] == "PDLIM4"), ]
X
ArrayKTSP
SKI_PDLIM4 <- allTSPs[which(allTSPs[,2] == "SKI" & allTSPs[,1] == "PDLIM4"), ]
SKI_PDLIM4
STK11_INO80 <- allTSPs[which(allTSPs[,1] == "SKI" & allTSPs[,2] == "PDLIM4"), ]
STK11_INO80
STK11_INO80 <- allTSPs[which(allTSPs[,1] == "SKI" & allTSPs[,1] == "PDLIM4"), ]
STK11_INO80
STK11_INO80 <- allTSPs[which(allTSPs[,2] == "SKI" & allTSPs[,1] == "PDLIM4"), ]
STK11_INO80
STK11_INO80 <- allTSPs[which(allTSPs[,1] == "STK11" & allTSPs[,2] == "INO80"), ]
STK11_INO80
SETMAR_RAB11FIP4 <- allTSPs[which(allTSPs[,1] == "SETMAR" & allTSPs[,2] == "RAB11FIP4"), ]
SETMAR_RAB11FIP4
SATB1_TMEM176B <- allTSPs[which(allTSPs[,1] == "SATB1" & allTSPs[,2] == "TMEM176B"), ]
SATB1_TMEM176B
PAPPA_TGFB2 <- allTSPs[which(allTSPs[,1] == "PAPPA" & allTSPs[,2] == "TGFB2"), ]
PAPPA_TGFB2
CTSP_GSTP1 <- allTSPs[which(allTSPs[,1] == "CTSP" & allTSPs[,2] == "GSTP1"), ]
CTSP_GSTP1
CTSP_GSTP1 <- allTSPs[which(allTSPs[,2] == "CTSP" & allTSPs[,1] == "GSTP1"), ]
CTSP_GSTP1
CTSP_GSTP1 <- allTSPs[which(allTSPs[,2] == "CTSP" & allTSPs[,2] == "GSTP1"), ]
CTSP_GSTP1
CTSP_GSTP1 <- allTSPs[which(allTSPs[,1] == "CTSP" & allTSPs[,1] == "GSTP1"), ]
CTSP_GSTP1
CTSP_GSTP1 <- allTSPs[which(allTSPs[,2] == "CTSP" & allTSPs[,1] == "GSTP1"), ]
CTSP_GSTP1
CTSB_GSTP1 <- allTSPs[which(allTSPs[,1] == "CTSB" & allTSPs[,2] == "GSTP1"), ]
CTSB_GSTP1
CTSB_GSTP1 <- allTSPs[which(allTSPs[,2] == "CTSB" & allTSPs[,1] == "GSTP1"), ]
CTSB_GSTP1
#########################################################################
#### Clear List and set options
remove(list = ls())
#########################################################################
#### Load
load("./Data/geneSetCollectionSet.MSigDBv6.1.rda")
require(GSEABase)
#########################################################################
#### Retrieve the Lists Needed
### Define lists of interests
nms <- c("EPITHELIAL_TO_MESENCHYMAL", "EMT",
"MIGRATION", "INVASION$",
"METASTASIS_UP$",  "METASTASIS_DN")
### Extract names
nms <- lapply(geneSetCollectionSet.msigdb, function(x, y) {
unique(unlist(lapply(y, grep, names(x), value=TRUE), recursive=FALSE))
},  y=nms)
nms <- nms[sapply(nms,  length) > 0]
#########################################################################
#### Select Lists and Extract Genes From All Lists
GeneList <- mapply(x=nms, y=geneSetCollectionSet.msigdb[names(nms)],  function(x, y) {
geneIds(y[x])
})
### Remove a level
GeneList <- unlist(GeneList, recursive = FALSE)
names(GeneList) <- gsub(".+\\.",  "",  names(GeneList))
######################################################
#### Pro Migration and EMT
ProA <- GeneList[c(
grep("_UP$", names(GeneList), value=TRUE),
grep("INVA", names(GeneList), value=TRUE),
grep("POSITIVE", names(GeneList), value=TRUE)
)]
#### Generate Consensus
allGns <- unique(unlist(ProA))
ProA <- sapply(ProA, function(x,y) y %in% x, y=allGns)
rownames(ProA) <- allGns
#### Summary
table(rowSums(ProA))
#### Get the Consensus Genes from ProAngiogenesis
ConsensusPA <- names(which(rowSums(ProA) > 1))
length(ConsensusPA)
AntiA <- GeneList[c(
grep("_DN$", names(GeneList), value=TRUE),
grep("NEGATIVE", names(GeneList), value=TRUE)
)]
#### Generate Consensus
allGns <- unique(unlist(AntiA))
AntiA<- sapply(AntiA, function(x,y) y %in% x, y=allGns)
rownames(AntiA) <- allGns
#### Summary
table(rowSums(AntiA))
#### Get the Consensus Genes from AntiAgenesis
ConsensusAA <- names(which(rowSums(AntiA) > 1))
length(ConsensusAA)
#####################################################################
#### Combine
emtList<- list(ConsensusPA, ConsensusAA)
AntiA <- GeneList[c(
grep("_DN$", names(GeneList), value=TRUE),
grep("NEGATIVE", names(GeneList), value=TRUE)
)]
PAPPAwhich <- lapply(AntiA, function(x){
y <- grep("PAPPA", x)
z <- x[y > 0]
})
GSTP1which <- lapply(AntiA, function(x){
y <- grep("GSTP1", x)
z <- x[y > 0]
})
#######################################################################
## Pro-emt
ProA <- GeneList[c(
grep("_UP$", names(GeneList), value=TRUE),
grep("INVA", names(GeneList), value=TRUE),
grep("POSITIVE", names(GeneList), value=TRUE)
)]
CTSBwhich <- lapply(ProA, function(x){
y <- grep("CTSB", x)
z <- x[y > 0]
})
View(CTSBwhich)
CTSBwhich[["JECHLINGER_EPITHELIAL_TO_MESENCHYMAL_TRANSITION_UP"]]
CTSBwhich[["ALONSO_METASTASIS_EMT_UP"]]
View(GSTP1which)
GSTP1which[["GOTZMANN_EPITHELIAL_TO_MESENCHYMAL_TRANSITION_DN"]]
GSTP1which[["CROMER_METASTASIS_DN"]]
rm(list = ls())
load("./Objs/allTSPs_Annot.rda")
load("./Objs/myTSPs.rda")
load("./Objs/FinalClassifiers.rda")
ClassifierGoodGns <- ArrayKTSP$TSPs[,1]
ClassifierBadGns <- ArrayKTSP$TSPs[,2]
AllGoodGns <- allTSPs[, c(1,3)]
AllGoodGns <- as.data.frame(AllGoodGns)
GoodGnsType <- AllGoodGns[AllGoodGns$GoodGene %in% ClassifierGoodGns, ]
table(GoodGnsType$GoodGene, GoodGnsType$Type)
AllBadGns <- allTSPs[, c(2,3)]
AllBadGns <- as.data.frame(AllBadGns)
BadGnsType <- AllBadGns[AllBadGns$BadGene %in% ClassifierBadGns, ]
table(BadGnsType$BadGene, BadGnsType$Type)
SKI_CTSP_Class <- AllBadGns[AllBadGns$BadGene %in% ClassifierGoodGns, ]
table(SKI_CTSP_Class$BadGene, SKI_CTSP_Class$Type)
# SKI < TAGs (oncogene)
# CTSP < emt (pro-invasion)
################
# Which good gene lists contain PDLIM4 and GSTP1
PDLIM4_GSTP1_Class <- AllGoodGns[AllGoodGns$GoodGene %in% ClassifierBadGns, ]
table(PDLIM4_GSTP1_Class$GoodGene, PDLIM4_GSTP1_Class$Type)
# PDLIM4 < immune-surveillance (immune-surveillance on) and TAGs (tumor suppressor)
# GSTP1 < emt (anti-invasion) and growth (anti-growth)
load("./Objs/FinalClassifiers.rda")
ArrayKTSP
