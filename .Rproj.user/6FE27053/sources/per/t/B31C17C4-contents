##################################################
### Luigi Marchionni
### Processed GEO data from series gse
### Clinical information from the matrix available from GEO


###################################################
###################################################
###################################################
###NOTE: USE R-3.2
###################################################
###################################################
###################################################


###################################################
### Clear Workspace
rm(list=ls())

### Date
date()

### Set wd
#setwd("/Users/marchion/Research/HeadNeck/pubDomain/GEOdata/GPL570/GSE42743")

### Load libraries
library("GEOquery")

# 
##################################################
###function to retrive the information from the messed up pheno
parsePheno <- function(myPat, pheno) {
  out <- rep(NA, length=nrow(pheno))
  sel <- unlist(apply(pheno, 2, grep, pattern=myPat, value=FALSE))
  val <- unlist(apply(pheno, 2, grep, pattern=myPat, value=TRUE))
  out[sel] <- gsub(".+: ", "", val)
  out <- toupper(out)
}


###################################################
### Get the gse
gse <- getGEO("GSE42743")#,  getGPL = F,  GSEMatrix=F)

### Check names
names(gse)

### Get the Expression Set
esetgse <- gse[[1]]

### Check length of platform lists: if more than 1 merge
length(esetgse)

##################################################
### Process esetgse: it has length == 1

### Check phenotypes
pheno <- pData(esetgse)
dim(pheno)
str(pheno)

### Remove useless columns
pheno <- pheno[, apply(pheno, 2, function(x) length(unique(x)) > 1 )
               | colnames(pheno) == "source_name_ch1" ]

##################################################
### Process the pheno data.frame to assemble phenotypes correctly

### What kind of information is available: columns with potential
### Phenotypic information
phenoTags <- apply(pheno[, grep("characteristics", colnames(pheno)), drop=FALSE], 2, gsub,
                   pattern=":.+", replacement="")
phenoTags <- unique(as.character(phenoTags))
phenoTags <- phenoTags[!is.na(phenoTags) & phenoTags != ""]
phenoTags


### Check if the information is present also in other columns
### Not labeled by the description tag in GEO
missedTags <- apply(pheno[, -grep("characteristics", colnames(pheno)), drop=FALSE], 2, gsub,
                    pattern=":.+", replacement="")
missedTags <- unique(as.character(missedTags))
missedTags <- missedTags[!is.na(missedTags) & missedTags != ""]
str(missedTags)

### If the following is TRUE you can go ahead with phenoTags only
if (! any(missedTags %in% phenoTags)) {
  print("go ahead 'phenoTags' contains all the needed information")
} else {
  stop("Check 'missedTags' for phenotypic information")
}

### Show tags found in the pheno data.frame
sort(phenoTags)


##################################################
##################################################
### IMPORTANT: checking for metacharacters in phenotypes tags
### It is crucial to remove special characters BEFORE the semicolon!!!
##################################################

### The list of special characters
specialChar <- c("\\.", "\\\\", "\\|", "\\(", "\\)", "\\[", "\\{",
                 "\\^", "\\$", "\\*", "\\+", "\\?")

### Check for metacharactes in the phenotypes tags
anyMetaChar <- sapply(specialChar, function(x, y) {
  length(grep(x, y)) > 0
}, y = phenoTags)
anyMetaChar <- names(anyMetaChar[anyMetaChar])

### Show matacharacters used in 'phenoTags' if any
anyMetaChar

### Replace metacharacter in 'pheno' and 'phenoTags' if these are present
if (length(anyMetaChar) > 0) {
  ## Process phenotypes tags
  phenoTags <- sapply(phenoTags, function(x, y) {
    y <- paste("[", paste(y, collapse=""), "]", sep="")
    gsub(y, replacement="", x)
  }, y=anyMetaChar)
  ## Process phenotypes data.frame
  rnms <- rownames(pheno)
  pheno <- sapply(pheno, function(x, y) {
    y <- paste("[", paste(y, collapse=""), "]", sep="")
    gsub(y, replacement="", x)
  }, y=anyMetaChar)
  ## Add ronames back to p